---
description: 写作规则（Rules for 文档与书籍）
globs: *.md
alwaysApply: false
---

本规则用于规范后续章节与文档的写作风格，确保内容结构统一、可读性强、对初学者友好，并便于技术审校与持续迭代。

---

## 一、章节固定结构（六步法）

每个技术章节必须严格采用以下六段式结构：

1) 前言（Why/Context）
- 用 2-4 段简洁中文说明本章动机、背景与要解决的问题
- 允许加入轻量“打气”/学习建议，营造亲和氛围

2) 目标（Objectives）
- 明确 3-6 条“完成后能做到什么”的学习目标（可操作、可验证）
- 如涉及运行结果，应给出预期现象描述

3) 设计（Design）
- 说明“范围/边界/取舍/模块映射”，避免一上来就堆实现细节
- 必须包含 2 幅示意图：
  - 核心流程图（源码→解析→AST→语义→生成→运行时）
  - 架构交互图（模块/包之间的关系）
- 可选：术语表（若本章引入新术语，需在此处先解释）

4) 实现（Implementation）
- 必须包含 1 份工程目录树（Tree）与 1 组可执行命令（Commands）
- 必须包含 2-3 段核心代码“对照引用”（见“代码引用规范”），聚焦主干流程
- 以分步说明（Step-by-Step）组织，不冗长

5) 测试（Testing）
- 列出与本章相关的测试类型/文件/命令
- 给出“常见错误与排查”清单（Symptoms → Checks）

6) 总结（Summary）
- 归纳 3-5 条关键要点与可迁移经验
- 给出“下一步阅读/练习”的指引

> 注：若章节主题特殊（如纯概念综述），仍应映射至上述六段，以“设计/实现/测试”中对应替换为“概念/案例/核对”。

---

## 二、格式规范（Format）

- 语言：中文，简洁、友好、循序渐进；避免大段术语堆叠
- 标题：使用 `#`、`##` 等层级清晰的 Markdown 标题
- 列表：统一使用 `-` 或数字序号，避免过深嵌套
- 代码块：
  - 命令行使用 `bash` 语言标识
  - 示例程序或伪代码使用对应语言标识
- 目录树（必须按行列出，避免 `{A,B}` 简写）：
```text
language-lxg
└── src
    ├── main
    │   └── java
    │       └── com
    │           └── lxg
    │               └── ...
    └── test
        └── java
            └── ...
```
- Mermaid 图：必须使用如下代码块包裹，不添加自定义颜色
```mermaid
flowchart LR
  A[Source] --> B[Lexer]
  B --> C[Parser]
```

---

## 三、代码引用规范（Citations）

- 仅引用“核心流程”相关代码，原则上每章 2-3 段
- 使用“按行号+文件路径”的方式引用（严格示例）：
```5:13:src/main/antlr4/com/lxg/antlr/Lxg.g4
stmt
    : 'print' expr ';'
    | 'let' ID '=' expr ';'
    | ID '=' expr ';'
    | 'if' '(' expr ')' block ('else' block)?
    | block
    ;
```
- 允许多段引用，但必须与文字讲解一一对应
- 避免整文件大段贴出；若需上下文，请精简并说明“节选”

---

## 四、图示要求（Diagrams）

- 每章“设计”中必须包含：
  - 核心流程图：源码→解析→AST→语义→生成→运行（flowchart）
  - 架构交互图：模块/包依赖（graph）
- 图下文字说明图意与使用场景，避免只给图不解释

---

## 五、术语与定义（Terminology）

- 若章节引入新术语，必须在“设计”中提前解释：
  - 词法/语法（Lexer/Parser）
  - AST 与 Parse Tree 差异
  - 符号表（Symbol Table）与槽位（Local Index）
  - 字节码（Bytecode）、ClassLoader、反射（Reflection）
- 同一术语在全书内需保持一致（如 `SourcePos`、`ValueType`）

---

## 六、可执行与可验证（Runnable & Verifiable）

- 每章实现部分要包含“能复制即用”的命令
- 若给出运行预期（例如打印输出），需写明期望现象
- 与测试章节联动：提供 `mvn -q -Dtest=... test` 的快速验证

---

## 七、审校清单（Review Checklist）

- [ ] 标题与六段结构齐全（前言/目标/设计/实现/测试/总结）
- [ ] 术语在“设计”中已解释（若新引入）
- [ ] 有流程图与架构图（各 1 幅），且图意在文中说明
- [ ] 工程目录以“树形”格式列出，无 `{A,B}` 简写
- [ ] 至少 2 段“按行号+路径”的核心代码引用
- [ ] 至少 1 组可执行命令与期望现象描述
- [ ] 含测试命令、覆盖点与排错建议
- [ ] 行文简洁，避免术语堆叠；对初学者友好

---

## 八、章节骨架模板（可复制使用）

```markdown
# <章节标题>

# 一、前言
<动机/背景/承上启下说明，2-4 段简述>

# 二、目标
- <学习目标1>
- <学习目标2>
- <学习目标3>

# 三、设计
<范围/边界/模块映射/取舍>

术语说明：
- <术语1>：<解释>
- <术语2>：<解释>

核心流程图：
```mermaid
flowchart LR
  A[Source] --> B[Lexer]
  B --> C[Parser]
  C --> D[AST]
  D --> E[Sema]
  E --> F[Codegen]
  F --> G[Runtime]
```

架构交互图：
```mermaid
graph TD
  Frontend --> Sema --> Codegen --> Runtime
```

# 四、实现
目录树：
```text
<按层级列出工程结构>
```

命令：
```bash
<可复制运行的命令>
```

代码（节选）：
```<start:end:path>
<核心代码片段>
```

# 五、测试
- <测试类型与文件>
- <运行命令>
- 常见排错：<症状 → 检查项>

# 六、总结
- <关键要点与可迁移经验>
- 下一步阅读：<章节/文档/练习>
```

---

## 九、示例指引（与本项目对齐）

- 语法片段：`src/main/antlr4/com/lxg/antlr/Lxg.g4`
- 主流程：`com.lxg.tools.Main#runSource`
- 打印发射：`com.lxg.codegen.CodeEmitter#emitPrint`
- 测试：`LexerSmokeTest`、`AstPrinterTest`、`SemanticErrorTest`、`LxgEndToEndTest`

> 遵循以上规则，可确保章节内容“能跑、能看、能查、可复用”，既照顾初学者上手体验，也便于后续扩展与审校。 